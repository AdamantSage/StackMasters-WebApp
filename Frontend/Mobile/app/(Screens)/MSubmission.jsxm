import React, { useState, useEffect, useRef } from 'react';
import { View, Text, Button, TouchableOpacity, StyleSheet, Alert, FlatList } from 'react-native';
import { Video } from 'expo-av';
import * as FileSystem from 'expo-file-system';
import * as MediaLibrary from 'expo-media-library';
import { Camera } from 'expo-camera';
import axios from 'axios';
import Icon from 'react-native-vector-icons/Ionicons';

const Submission = () => {
  const [assignments, setAssignments] = useState([]);
  const [selectedAssignmentId, setSelectedAssignmentId] = useState('');
  const [videoUri, setVideoUri] = useState('');
  const [recordedVideoUri, setRecordedVideoUri] = useState('');
  const [showAssignments, setShowAssignments] = useState(false);
  const [streamingVideoUri, setStreamingVideoUri] = useState('');
  const [cameraPermission, setCameraPermission] = useState(null);
  const [mediaLibraryPermission, setMediaLibraryPermission] = useState(null);
  const [isRecording, setIsRecording] = useState(false);
  const cameraRef = useRef(null); // Initialize cameraRef

  // Fetch assignments from backend on component mount
  useEffect(() => {
    const fetchAssignments = async () => {
      if (showAssignments) {
        try {
          const response = await axios.get('http://192.168.48.58:5000/assignment');
          console.log('Fetched assignments:', response.data);
          setAssignments(response.data);
        } catch (error) {
          console.error('Error fetching assignments', error);
        }
      }
    };

    fetchAssignments();
  }, [showAssignments]);

  // Request media library permissions
  useEffect(() => {
    const requestMediaLibraryPermission = async () => {
      const mediaResponse = await MediaLibrary.requestPermissionsAsync();
      setMediaLibraryPermission(mediaResponse.status === 'granted');
    };

    requestMediaLibraryPermission();
  }, []);

  const handleAssignmentSelection = (id) => {
    setSelectedAssignmentId(id);
    setStreamingVideoUri(`http://192.168.48.58:5000/videos/${id}/stream`);
  };

  const handleUpload = () => {
    if (videoUri && selectedAssignmentId) {
      const formData = new FormData();
      formData.append('assignmentId', selectedAssignmentId);
      formData.append('video', {
        uri: videoUri,
        type: 'video/mp4',
        name: `assignment_${selectedAssignmentId}.mp4`,
      });

      axios.post(`http://192.168.48.58:5000/assignment/${selectedAssignmentId}/videos`, formData)
        .then(() => Alert.alert('Success', 'Video uploaded successfully'))
        .catch(error => console.error('Error uploading video', error));
    } else {
      Alert.alert('Error', 'Please select an assignment and a video file.');
    }
  };

  const handleDownload = async () => {
    if (selectedAssignmentId) {
      try {
        const res = await axios.get(`http://192.168.48.58:5000/assignments/${selectedAssignmentId}/videos`, { responseType: 'blob' });
        const videoPath = `${FileSystem.documentDirectory}assignment_${selectedAssignmentId}.mp4`;

        await FileSystem.writeAsStringAsync(videoPath, res.data, { encoding: FileSystem.EncodingType.Base64 });
        Alert.alert('Success', 'Video downloaded successfully');
      } catch (error) {
        console.error('Error downloading video', error);
        Alert.alert('Error', 'Failed to download the video.');
      }
    } else {
      Alert.alert('Error', 'Please select an assignment.');
    }
  };

  const handleStartRecording = async () => {
    // Check if camera permission is not granted
    if (cameraPermission === null) {
        const { status } = await Camera.requestCameraPermissionsAsync();
        setCameraPermission(status === 'granted');
    }

    // Proceed if the camera permission is granted
    if (cameraPermission === true) {
        // Ensure the camera reference is valid
        if (cameraRef.current) {
            setIsRecording(true);
            try {
                const data = await cameraRef.current.recordAsync();
                setRecordedVideoUri(data.uri);
            } catch (error) {
                console.error('Error recording video:', error);
                Alert.alert('Error', 'Could not record the video. Please try again.');
            }
        } else {
            Alert.alert('Error', 'Camera is not available.');
        }
    } else {
        Alert.alert('Error', 'Camera permission is not granted.');
    }
};


  const handleStopRecording = () => {
    if (cameraRef.current && isRecording) {
      cameraRef.current.stopRecording();
      setIsRecording(false);
    }
  };

  const handlePickVideo = async () => {
    // Check if media library permissions are granted
    if (mediaLibraryPermission === null) {
        const { status } = await MediaLibrary.requestPermissionsAsync();
        setMediaLibraryPermission(status === 'granted');
    }

    if (mediaLibraryPermission) {
        try {
            const result = await MediaLibrary.pickAssetsAsync({ mediaType: 'video' });
            if (result.selected.length > 0) {
                setVideoUri(result.selected[0].uri);
            } else {
                Alert.alert('No video selected', 'Please select a video.');
            }
        } catch (error) {
            console.error('Error picking video:', error);
            Alert.alert('Error', 'Could not pick the video. Please try again.');
        }
    } else {
        Alert.alert('Permission Error', 'Media library permission is not granted.');
    }
};



  const handleShowAssignments = () => {
    setShowAssignments(prev => !prev);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Video Upload & Download</Text>

      {/* Button to show/hide assignments */}
      <Button title="Show Assignments" onPress={handleShowAssignments} />

      {/* Assignment selection */}
      {showAssignments && (
        <FlatList
          data={assignments}
          keyExtractor={(item) => item.assignment_id ? item.assignment_id.toString() : Math.random().toString()}
          renderItem={({ item }) => {
            if (!item) return null; // Check if item is undefined

            return (
              <TouchableOpacity
                style={[styles.assignmentButton, selectedAssignmentId === item.assignment_id && styles.selectedAssignment]}
                onPress={() => handleAssignmentSelection(item.assignment_id)}
              >
                <Text style={styles.assignmentText}>
                  {item.assign_name} - Due: {new Date(item.due_date).toLocaleDateString()}
                </Text>
              </TouchableOpacity>
            );
          }}
        />
      )}

      {/* Display recorded video */}
      {recordedVideoUri ? (
        <View>
          <Text style={styles.subtitle}>Recorded Video:</Text>
          <Video
            source={{ uri: recordedVideoUri }}
            style={styles.video}
            useNativeControls
            resizeMode="contain"
            isLooping
          />
        </View>
      ) : null}

      {/* Display streaming video */}
      {streamingVideoUri ? (
        <View>
          <Text style={styles.subtitle}>Streaming Video:</Text>
          <Video
            source={{ uri: streamingVideoUri }}
            style={styles.video}
            useNativeControls
            resizeMode="contain"
            isLooping
            onError={(error) => {
              console.error('Error playing video:', error);
              Alert.alert('Error', 'Failed to load the streaming video.');
            }}
          />
        </View>
      ) : null}

      {/* Camera Component - only shown when recording */}
      {isRecording && cameraPermission === 'granted' && (
        <Camera style={styles.camera} ref={cameraRef}>
          {/* Additional camera UI elements can be added here */}
        </Camera>
      )}

      {/* Footer with action icons */}
      <View style={styles.footer}>
        <TouchableOpacity style={styles.iconButton} onPress={handlePickVideo}>
          <Icon name="image" size={30} color="#007AFF" />
          <Text style={styles.iconLabel}>Pick</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.iconButton} onPress={handleUpload}>
          <Icon name="cloud-upload" size={30} color="#007AFF" />
          <Text style={styles.iconLabel}>Upload</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.iconButton} onPress={handleDownload}>
          <Icon name="cloud-download" size={30} color="#007AFF" />
          <Text style={styles.iconLabel}>Download</Text>
        </TouchableOpacity>

        <TouchableOpacity style={styles.iconButton} onPress={isRecording ? handleStopRecording : handleStartRecording}>
          <Icon name="videocam" size={30} color="#007AFF" />
          <Text style={styles.iconLabel}>{isRecording ? 'Stop' : 'Record'}</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  assignmentButton: {
    padding: 10,
    marginBottom: 10,
    backgroundColor: '#f0f0f0',
    borderRadius: 5,
  },
  selectedAssignment: {
    backgroundColor: '#c0c0c0',
  },
  assignmentText: {
    fontSize: 16,
  },
  subtitle: {
    fontSize: 18,
    marginVertical: 10,
  },
  video: {
    width: '100%',
    height: 200,
    marginBottom: 20,
  },
  camera: {
    flex: 1,
    marginVertical: 20,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 20,
  },
  iconButton: {
    alignItems: 'center',
  },
  iconLabel: {
    fontSize: 12,
  },
});

export default Submission;
